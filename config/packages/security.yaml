security:
    encoders:
        App\Entity\Visiteur:
            algorithm: bcrypt
    providers:
    # On crée un fournisseur d'utilisateurs nommé our_db_provider qui va interroger la propriété username de l'entité App\Entity\User
        our_db_provider:
            entity:
                class: App\Entity\Visiteur
                property: username
    firewalls:
# Ce parefeu désactive la sécurité sur certaines URL comme le profiler ou encore les assets
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/ 
            security: false
        
        main:
# toutes les URL commençant par « / » (c'est-à-dire tout le site) sont protégées par ce pare-feu. On dit qu'elles sont derrière le pare-feu
            pattern: ^/
# les utilisateurs anonymes sont acceptés. Les ressources seront protégées grâce aux rôles.
            anonymous: true 
            provider: our_db_provider 
            form_login:
                check_path: security_login
                login_path: security_login
# Securisation des formulaires
                csrf_token_generator: security.csrf.token_manager
# La route sur laquelle l'utilisateur doit être redirigé aprèS une connexion reussie
                default_target_path: rapport_index 
            logout:
                # La route de deconnexion
                path: security_logout
# La route sur laquelle doit être rediriger l'utilisateur apres une deconnexion
                target: security_login
    access_control:
        - { path: '^/rapport', roles: ROLE_VISITEUR }